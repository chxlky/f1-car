// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'discovery.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `add_or_update_car`, `create_car_from_service_info`, `extract_property`, `perform_discovery`, `stop_discovery_internal`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<F1DiscoveryService>>
abstract class F1DiscoveryService implements RustOpaqueInterface {
  List<F1Car> getDiscoveredCars();

  bool isDiscovering();

  Stream<DiscoveryEvent> loadMockCars();

  factory F1DiscoveryService() =>
      RustLib.instance.api.crateApiDiscoveryF1DiscoveryServiceNew();

  Stream<DiscoveryEvent> startDiscovery();
}

@freezed
sealed class DiscoveryEvent with _$DiscoveryEvent {
  const DiscoveryEvent._();

  const factory DiscoveryEvent.carDiscovered(F1Car field0) =
      DiscoveryEvent_CarDiscovered;
  const factory DiscoveryEvent.carUpdated(F1Car field0) =
      DiscoveryEvent_CarUpdated;
  const factory DiscoveryEvent.discoveryStarted() =
      DiscoveryEvent_DiscoveryStarted;
  const factory DiscoveryEvent.discoveryStopped() =
      DiscoveryEvent_DiscoveryStopped;
  const factory DiscoveryEvent.error(String field0) = DiscoveryEvent_Error;
}
