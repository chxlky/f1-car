
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getOrientation() : Promise<Result<Orientation, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_orientation") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setOrientation(orientation: Orientation) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_orientation", { orientation }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startDiscovery() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_discovery") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopDiscovery() : Promise<Result<null, DiscoveryError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_discovery") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDiscoveredCars() : Promise<Result<F1Car[], DiscoveryError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_discovered_cars") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async connectToCar(carId: string) : Promise<Result<null, DiscoveryError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("connect_to_car", { carId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async disconnectCar(carId: string) : Promise<Result<null, DiscoveryError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("disconnect_car", { carId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCarById(carId: string) : Promise<Result<F1Car | null, DiscoveryError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_car_by_id", { carId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isDiscoveryRunning() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_discovery_running") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startJoystickService(wsPort: number, piAddr: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_joystick_service", { wsPort, piAddr }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopJoystickService() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_joystick_service") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
carDiscoveredEvent: CarDiscoveredEvent,
carOfflineEvent: CarOfflineEvent,
carRemovedEvent: CarRemovedEvent,
carUpdatedEvent: CarUpdatedEvent,
discoveryStatusEvent: DiscoveryStatusEvent
}>({
carDiscoveredEvent: "car-discovered-event",
carOfflineEvent: "car-offline-event",
carRemovedEvent: "car-removed-event",
carUpdatedEvent: "car-updated-event",
discoveryStatusEvent: "discovery-status-event"
})

/** user-defined constants **/



/** user-defined types **/

export type CarDiscoveredEvent = { car: F1Car }
export type CarOfflineEvent = { car: F1Car }
export type CarRemovedEvent = { carId: string }
export type CarUpdatedEvent = { car: F1Car }
export type ConnectionStatus = "Disconnected" | "Connecting" | "Connected" | { Failed: string }
export type DiscoveryError = { code: string; message: string }
export type DiscoveryStatusEvent = { isRunning: boolean; message: string }
export type F1Car = { id: string; number: number; driver: string; team: string; ip: string; port: number; version: string; connectionStatus: ConnectionStatus; lastSeen: SystemTime | null }
export type Orientation = "Portrait" | "Landscape"
export type SystemTime = { duration_since_epoch: number; duration_since_unix_epoch: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
